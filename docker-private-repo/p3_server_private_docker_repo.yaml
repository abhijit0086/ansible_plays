---
- name: install private-repo master
  hosts: private-repo-master
  become: yes

  vars_prompt:
  - name: "repo_ip"
    prompt: "enter repo address, eg: 192.168.0.26 or 172.31.10.91"
    private: no

  vars:
    docker_repo_ip: "{{repo_ip}}"
    server_hostname: docker.private.repo
    key_size: 4096
    private_key: domain.key
    csr: domain.csr
    certificate: domain.crt
    passphrase: # Set if you want passphrase
    key_type: RSA # Others include DSA, ECC, Ed25519, Ed448, X25519, X448
    country_name: IN
    email_address: automatonai@gmail.com
    organization_name: automaton

  tasks:
    - name: Step 1 - update /etc/hosts for private repo
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
        state: present
        backup: yes
      with_items:
      - ' '
      - '# for private repo'
      - '{{ docker_repo_ip }}    {{ server_hostname }}'


    - name: Step 2 - Create folder where docker files will be stored
      file:
        path: /docker_data/certs
        state: directory
  
    - name: Step 3 - Install openssl
      apt:
        name: openssl
        state: present

    - name: Step 4 - Generate an OpenSSL private key
      openssl_privatekey:
        path: "/docker_data/certs/{{ private_key }}"
        size: "{{ key_size }}"
        type: "{{ key_type }}"
        backup: yes
    
    - name: Step 4.1 - Generate an OpenSSL Certificate Signing Request with Subject information
      openssl_csr:
        path: "/docker_data/certs/{{ csr }}"
        privatekey_path: "/docker_data/certs/{{ private_key }}"
        country_name: "{{ country_name }}"
        organization_name: "{{ organization_name }}"
        email_address: "{{ email_address }}"
        common_name: "{{ server_hostname }}"

    - name: step 4.2 - Generate a Self Signed OpenSSL certificate
      openssl_certificate:
        path: "/docker_data/certs/{{ certificate }}"
        privatekey_path: "/docker_data/certs/domain.key"
        csr_path: "/docker_data/certs/{{ csr }}"
        provider: selfsigned

    - name: step 4.3 - fetch the certificate to share with other servers
      fetch:
        src: /docker_data/certs/{{ certificate }}
        dest: ./fetched/{{ certificate }}
        flat: yes

    - name: Step 5 - Create folder where docker images will be stored
      file:
        path: /docker_data/images
        state: directory

    - name: Step 6.0 - Install pip for new nodes
      apt:
        name: python3-pip
        state: present

    - name: Step 6.1 - install docker py
      pip:
        name: docker-py

    - name: Step 6.2 - Now create a private docker registry
      community.docker.docker_container:
        name: myregistry
        image: docker.io/registry
        restart_policy: on-failure
        env:
          REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/{{ certificate }}"
          REGISTRY_HTTP_TLS_KEY: "/certs/{{private_key}}"
        volumes:
          - /docker_data/images:/var/lib/registry
          - /docker_data/certs:/certs
        ports:
          # port -> host:container
          - "5000:5000"
    
    - name: step 7 - make directory for certs
      file:
        path: /etc/docker/certs.d/{{ server_hostname }}:5000
        state: directory

    - name: step 8 - copy private key to location
      copy:
        src: ./fetched/{{ certificate }}
        dest: /etc/docker/certs.d/{{ server_hostname }}:5000/{{ certificate }}


    - name: Step 9 - pull any image from dockerhub for uploading to our docker.private.repo
      community.docker.docker_image:
        name: hello-world
        source: pull

    - name: step 10- Tag and push to private repo
      community.docker.docker_image:
        name: hello-world
        source: local
        repository: "{{ server_hostname }}:5000/hello-world:v1"
        push: yes

    - name: Step 12 - pull any image from docker.private.repo
      community.docker.docker_image:
        name: "{{ server_hostname }}:5000/hello-world:v1"
        source: pull

    - name: step 13 - verify pulled image
      shell: sudo docker images
    # debug: msg={{ ps.stdout }}